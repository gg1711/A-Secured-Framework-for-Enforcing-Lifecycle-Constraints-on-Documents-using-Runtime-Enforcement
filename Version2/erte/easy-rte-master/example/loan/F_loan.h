
//This file should be called F_loan.h
//This is autogenerated code. Edit by hand at your peril!

#include <stdint.h>
#include <stdbool.h>
#include <assert.h>

//the dtimer_t type
typedef uint64_t dtimer_t;

//For each policy, we need an enum type for the state machine

enum loan_policy_p1_states { 
	POLICY_STATE_loan_p1_s0, 
	POLICY_STATE_loan_p1_s1,
	POLICY_STATE_loan_p1_violation 
};

enum loan_policy_p2_states { 
	POLICY_STATE_loan_p2_s0, 
	POLICY_STATE_loan_p2_s1,
	POLICY_STATE_loan_p2_violation 
};


//Inputs to the function loan
typedef struct {
	int16_t A;
	int16_t B;
	int16_t C;
	int16_t D;
	int16_t E;
	
} inputs_loan_t;

//Outputs from the function loan
typedef struct {
	int16_t P1;
	int16_t P2;
	
} outputs_loan_t;

//enforcer state and vars:
typedef struct {
	enum loan_policy_p1_states _policy_p1_state;
	//internal vars
	int16_t b;
	
	
	enum loan_policy_p2_states _policy_p2_state;
	//internal vars
	
	
	
} enforcervars_loan_t;




//This function is provided in "F_loan.c"
//It sets up the variable structures to their initial values
void loan_init_all_vars(enforcervars_loan_t* me, inputs_loan_t* inputs, outputs_loan_t* outputs);

//This function is provided in "F_loan.c"
//It will run the synthesised enforcer and call the controller function
void loan_run_via_enforcer(enforcervars_loan_t* me, inputs_loan_t* inputs, outputs_loan_t* outputs);

//This function is provided from the user
//It is the controller function
extern void loan_run(inputs_loan_t* inputs, outputs_loan_t* outputs);

//enforcer functions


//This function is provided in "F_loan.c"
//It will run the input enforcer for loan's policy p1
void loan_run_input_enforcer_p1(enforcervars_loan_t* me, inputs_loan_t* inputs);

//This function is provided in "F_loan.c"
//It will run the input enforcer for loan's policy p1
void loan_run_output_enforcer_p1(enforcervars_loan_t* me, inputs_loan_t* inputs, outputs_loan_t* outputs);

//This function is provided in "F_loan.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int loan_check_rv_status_p1(enforcervars_loan_t* me);


//This function is provided in "F_loan.c"
//It will run the input enforcer for loan's policy p2
void loan_run_input_enforcer_p2(enforcervars_loan_t* me, inputs_loan_t* inputs);

//This function is provided in "F_loan.c"
//It will run the input enforcer for loan's policy p2
void loan_run_output_enforcer_p2(enforcervars_loan_t* me, inputs_loan_t* inputs, outputs_loan_t* outputs);

//This function is provided in "F_loan.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int loan_check_rv_status_p2(enforcervars_loan_t* me);


